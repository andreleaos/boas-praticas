Clean Architecture

🏛️ Clean Architecture – Conceitos Fundamentais

🔥 O objetivo da Clean Architecture:

- 📦 Independência de frameworks e ferramentas.
- 🔄 Independência da interface de usuário.
- 🗄️ Independência de banco de dados.
- 🔗 Independência de serviços externos.
- ✅ Alta testabilidade e facilidade de manutenção.
- ♻️ Regra de Ouro: As dependências devem sempre apontar para o centro (core).

🎯 O Círculo Concêntrico da Clean Architecture

	+-------------------------+
	|    Interface Adapters     | ← Controllers, Gateways, Presenters
	+-------------------------+
	|    Application (Use Cases)|
	+-------------------------+
	|    Domain (Entities)      |
	+-------------------------+

🔄 Regras de Dependência:

- As camadas externas podem depender das internas, nunca o contrário.
- Nenhum código do domínio conhece banco, frameworks, UI ou qualquer detalhe externo.

🔍 Camadas da Clean Architecture:

| Camada                   | Descrição                                                                            | Exemplo                              |
| ------------------------ | ------------------------------------------------------------------------------------ | ------------------------------------ |
| **Entities (Domínio)**   | Regras de negócio mais genéricas e de alto nível.                                    | `Cliente`, `Pedido`, `Conta`         |
| **Use Cases**            | Casos de uso que orquestram regras do domínio.                                       | `CadastrarCliente`, `RealizarPedido` |
| **Interface Adapters**   | Adaptadores que traduzem dados entre as camadas (Controllers, Gateways, Presenters). | API REST, Banco, UI                  |
| **Frameworks & Drivers** | Tecnologias e frameworks externos.                                                   | Spring, JPA, Banco, RabbitMQ, Kafka  |

---

💡 Princípios Fundamentais da Clean Architecture

- SOLID: Os 5 princípios de design orientado a objetos.
- Independência: O domínio não depende de nada externo.
- Inversão de Dependência: Interfaces são definidas no domínio ou nos casos de uso; implementações estão fora.

🚀 Exemplo Prático Aplicado – Sistema de Cadastro de Cliente

🔸 1. Entities (Domínio)

public class Cliente {
    private Long id;
    private String nome;
    private String email;

    public Cliente(Long id, String nome, String email) {
        this.id = id;
        this.nome = nome;
        this.email = email;
    }

    public String getNome() { return nome; }
    public String getEmail() { return email; }
}

🔸 2. Use Cases

Definição de Porta (Interface):

public interface CadastrarClienteInputPort {
    void executar(Cliente cliente);
}


Implementação da Regra:

public class CadastrarClienteUseCase implements CadastrarClienteInputPort {

    private final ClienteRepository repository;

    public CadastrarClienteUseCase(ClienteRepository repository) {
        this.repository = repository;
    }

    @Override
    public void executar(Cliente cliente) {
        if (cliente.getEmail() == null || cliente.getEmail().isEmpty()) {
            throw new IllegalArgumentException("Email não pode ser vazio.");
        }
        repository.salvar(cliente);
    }
}

🔸 3. Interface Adapters (Ex.: Controller + Gateway)

Interface do Repositório (Porta Secundária):

public interface ClienteRepository {
    void salvar(Cliente cliente);
}

Implementação do Gateway para Banco (Adaptador):

public class ClienteRepositoryMySQL implements ClienteRepository {

    @Override
    public void salvar(Cliente cliente) {
        System.out.println("Salvando cliente no MySQL: " + cliente.getNome());
        // Aqui seria a lógica real com JPA, JDBC, etc.
    }
}

Controller REST (Adaptador de Interface):

public class ClienteController {

    private final CadastrarClienteInputPort useCase;

    public ClienteController(CadastrarClienteInputPort useCase) {
        this.useCase = useCase;
    }

    public void cadastrar(String nome, String email) {
        Cliente cliente = new Cliente(null, nome, email);
        useCase.executar(cliente);
        System.out.println("Cliente cadastrado com sucesso!");
    }
}

🔸 4. Frameworks & Drivers (Ex.: Spring, Banco, UI)

- Essa camada cuida de frameworks como Spring Boot, bancos (MySQL, MongoDB), REST API, Kafka, etc.
- No exemplo acima, o ClienteRepositoryMySQL e o ClienteController estão nesta camada.

🔄 Regra de Dependência — Visualizando

Frameworks & Drivers  →  Interface Adapters  →  Use Cases  →  Entities

✔️ As dependências apontam sempre para dentro, nunca para fora.

---

🎯 Exemplo de Instanciação Manual (Sem Spring)

public class App {
    public static void main(String[] args) {
        ClienteRepository repository = new ClienteRepositoryMySQL();
        CadastrarClienteInputPort useCase = new CadastrarClienteUseCase(repository);
        ClienteController controller = new ClienteController(useCase);

        controller.cadastrar("André Leão", "andre@example.com");
    }
}

--

📐 Organização dos Pacotes no Projeto

br.com.meuprojeto
├── domain
│   ├── entity
│   │   └── Cliente.java
│   └── repository
│       └── ClienteRepository.java
├── application
│   └── usecase
│       └── CadastrarClienteUseCase.java
├── adapter
│   ├── controller
│   │   └── ClienteController.java
│   └── gateway
│       └── ClienteRepositoryMySQL.java
└── framework
    └── App.java

---

🏆 Vantagens da Clean Architecture

- 🔥 Código desacoplado de frameworks.
- 🔥 Mudança fácil de tecnologias (ex.: trocar banco, API, UI).
- 🔥 Domínio isolado e testável.
- 🔥 Alta escalabilidade e manutenibilidade.
- 🔥 Facilita testes unitários e integração.

🚫 Desvantagens / Cuidados

- 🏗️ Arquitetura inicialmente mais complexa.
- 🚀 Overhead para projetos muito pequenos.
- 💡 Exige disciplina no respeito às regras de dependência.

---

🔥 Resumo Visual dos Princípios da Clean Architecture

| Princípio                       | Descrição                                                 |
| ------------------------------- | --------------------------------------------------------- |
| **Independência de frameworks** | O domínio não conhece frameworks externos.                |
| **Regra de dependência**        | Depende sempre para dentro.                               |
| **Testabilidade**               | Fácil de testar regras de negócio isoladas.               |
| **Inversão de Dependência**     | Interfaces ficam nas camadas internas.                    |
| **Facilidade de evolução**      | Banco, UI ou APIs podem ser trocados sem impactar o core. |