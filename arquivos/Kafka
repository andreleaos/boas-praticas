
Kafka

üèõÔ∏è O que √© Apache Kafka?

- O Apache Kafka √© uma plataforma distribu√≠da de streaming de eventos.
- Funciona como um message broker altamente escal√°vel, tolerante a falhas e baseado em logs distribu√≠dos.

- √â usado para:

‚úÖ Mensageria ass√≠ncrona.
‚úÖ Processamento de streams em tempo real.
‚úÖ Integra√ß√£o entre microsservi√ßos.
‚úÖ Pipelines de dados.

--

üî• Conceitos Fundamentais do Kafka

| Conceito           | Descri√ß√£o                                                           |
| ------------------ | ------------------------------------------------------------------- |
| **Producer**       | Publica mensagens em um t√≥pico.                                     |
| **Topic**          | Canal (log) onde as mensagens s√£o armazenadas.                      |
| **Partition**      | Divis√£o dentro de um t√≥pico para paralelismo e escalabilidade.      |
| **Offset**         | Posi√ß√£o sequencial da mensagem na parti√ß√£o.                         |
| **Consumer**       | L√™ as mensagens de um t√≥pico.                                       |
| **Consumer Group** | Grupo de consumidores para processamento balanceado.                |
| **Broker**         | Servidor Kafka. Um cluster possui v√°rios brokers.                   |
| **Zookeeper**      | Coordena o cluster (em Kafka 2.x; Kafka 3+ pode ser sem Zookeeper). |

üéØ Kafka ‚Äî Arquitetura B√°sica

Producer ‚Üí Topic (com Parti√ß√µes) ‚Üí Consumer Group

‚úîÔ∏è V√°rios consumidores no mesmo grupo leem parti√ß√µes diferentes (balanceamento).
‚úîÔ∏è Consumidores em grupos diferentes recebem todas as mensagens (broadcast por grupo).

üèóÔ∏è Exemplo Pr√°tico ‚Äî Kafka com Java

üîß Depend√™ncias Maven (Kafka Client)

<dependency>
    <groupId>org.apache.kafka</groupId>
    <artifactId>kafka-clients</artifactId>
    <version>3.7.0</version>
</dependency>


üî• Configura√ß√£o Kafka Local

‚úîÔ∏è Kafka rodando localmente (localhost:9092).
‚úîÔ∏è Topic: clientes-topic

---

üöÄ Producer Kafka em Java

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

import java.util.Properties;

public class ClienteProducer {

    public static void main(String[] args) throws Exception {
        String bootstrapServers = "localhost:9092";

        // Configura√ß√µes do Producer
        Properties props = new Properties();
        props.put("bootstrap.servers", bootstrapServers);
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

        // Cria o Producer
        Producer<String, String> producer = new KafkaProducer<>(props);

        String topic = "clientes-topic";
        String chave = "cliente1";
        String valor = "Novo cliente cadastrado: Andr√© Le√£o";

        // Envia a mensagem
        ProducerRecord<String, String> record = new ProducerRecord<>(topic, chave, valor);

        RecordMetadata metadata = producer.send(record).get();

        System.out.println("üöÄ Mensagem enviada com sucesso!");
        System.out.println("Topic: " + metadata.topic());
        System.out.println("Partition: " + metadata.partition());
        System.out.println("Offset: " + metadata.offset());

        producer.close();
    }
}

---

üì• Consumer Kafka em Java

import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;

import java.time.Duration;
import java.util.Collections;
import java.util.Properties;

public class ClienteConsumer {

    public static void main(String[] args) {
        String bootstrapServers = "localhost:9092";
        String grupo = "grupo-consumidores-clientes";
        String topic = "clientes-topic";

        // Configura√ß√µes do Consumer
        Properties props = new Properties();
        props.put("bootstrap.servers", bootstrapServers);
        props.put("group.id", grupo);
        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("auto.offset.reset", "earliest"); // Come√ßa desde o in√≠cio se n√£o tiver offset salvo

        // Cria o Consumer
        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);

        // Inscreve no t√≥pico
        consumer.subscribe(Collections.singletonList(topic));

        System.out.println("üïë Aguardando mensagens...");

        while (true) {
            ConsumerRecords<String, String> registros = consumer.poll(Duration.ofMillis(1000));

            for (ConsumerRecord<String, String> registro : registros) {
                System.out.println("üì• Mensagem recebida:");
                System.out.println("Key: " + registro.key());
                System.out.println("Value: " + registro.value());
                System.out.println("Partition: " + registro.partition());
                System.out.println("Offset: " + registro.offset());
                System.out.println("----------------------------------------");
            }
        }
    }
}


üî• Conceitos Avan√ßados Kafka

| Conceito                   | ‚úîÔ∏è Descri√ß√£o                                            |
| -------------------------- | ------------------------------------------------------- |
| **Retention Policy**       | Tempo que as mensagens ficam no t√≥pico (padr√£o 7 dias). |
| **Offset**                 | Controle do ponto de leitura da fila/log.               |
| **Consumer Groups**        | Distribui√ß√£o de mensagens entre consumidores.           |
| **Exactly-once semantics** | Kafka garante entrega exatamente uma vez.               |
| **Kafka Streams**          | Processamento de streams dentro do pr√≥prio Kafka.       |

üèÜ Boas Pr√°ticas Kafka

| Pr√°tica                | ‚úîÔ∏è Recomenda√ß√£o                                              |
| ---------------------- | ------------------------------------------------------------ |
| Escolha de Parti√ß√µes   | Mais parti√ß√µes = mais paralelismo, mas tamb√©m mais overhead. |
| Tratamento de Failures | Use Dead Letter Topics (DLT) se necess√°rio.                  |
| Seguran√ßa              | Configure SSL, SASL, ACL para produ√ß√£o.                      |
| Monitoramento          | Kafka Manager, Prometheus, Grafana, Kafka UI.                |
| Controle de Offset     | Manual (commit) para maior controle.                         |

üì¶ Exemplos de Uso Real Kafka

- Integra√ß√£o entre microsservi√ßos.
- Logs distribu√≠dos.
- Processamento de eventos (Event-Driven Architecture).
- ETL em tempo real.
- Analytics, Data Pipelines e Machine Learning.